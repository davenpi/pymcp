---
description: 
globs: 
alwaysApply: false
---
We are building an Python SDK for Model Context Protocol (MCP). The intent of the protocol is to provide a standard way to give LLMs access to tools, resources, and prompts. All messages are JSON RCP 2.0 messages.

The protocol works with a host-client-server architecture. The host—an application with an embedded LLM—creates clients to speak to MCP servers. The servers provide tools (as functions), resources, and data. The LLM in the host is responsible for crafting requests and interpreting responses—including error responses.

There are three fundamental types and a relatively small set (dozens) of subtypes. The fundamental types are Requests, Notifications, and Responses (either a result or an error). Then we have sub-types like InitializeRequest, InitializeResult, InitializedNotification, and so on.

The original spec schema is written in Typescript. We are building a Python SDK. Our goal is to make the experience delightful for Python developers.